// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parsing_log.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_parsing_5flog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_parsing_5flog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_parsing_5flog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_parsing_5flog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_parsing_5flog_2eproto;
namespace monitor {
namespace proto {
class ParsingLog;
class ParsingLogDefaultTypeInternal;
extern ParsingLogDefaultTypeInternal _ParsingLog_default_instance_;
}  // namespace proto
}  // namespace monitor
PROTOBUF_NAMESPACE_OPEN
template<> ::monitor::proto::ParsingLog* Arena::CreateMaybeMessage<::monitor::proto::ParsingLog>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace monitor {
namespace proto {

// ===================================================================

class ParsingLog PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:monitor.proto.ParsingLog) */ {
 public:
  inline ParsingLog() : ParsingLog(nullptr) {}
  virtual ~ParsingLog();

  ParsingLog(const ParsingLog& from);
  ParsingLog(ParsingLog&& from) noexcept
    : ParsingLog() {
    *this = ::std::move(from);
  }

  inline ParsingLog& operator=(const ParsingLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParsingLog& operator=(ParsingLog&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ParsingLog& default_instance();

  static inline const ParsingLog* internal_default_instance() {
    return reinterpret_cast<const ParsingLog*>(
               &_ParsingLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ParsingLog& a, ParsingLog& b) {
    a.Swap(&b);
  }
  inline void Swap(ParsingLog* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParsingLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ParsingLog* New() const final {
    return CreateMaybeMessage<ParsingLog>(nullptr);
  }

  ParsingLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ParsingLog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ParsingLog& from);
  void MergeFrom(const ParsingLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParsingLog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "monitor.proto.ParsingLog";
  }
  protected:
  explicit ParsingLog(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_parsing_5flog_2eproto);
    return ::descriptor_table_parsing_5flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllLogFieldNumber = 1,
    kDateTimeFieldNumber = 2,
    kTypeFieldNumber = 3,
    kNodeFieldNumber = 4,
    kFunInfoFieldNumber = 5,
    kMessageFieldNumber = 6,
  };
  // string allLog = 1;
  void clear_alllog();
  const std::string& alllog() const;
  void set_alllog(const std::string& value);
  void set_alllog(std::string&& value);
  void set_alllog(const char* value);
  void set_alllog(const char* value, size_t size);
  std::string* mutable_alllog();
  std::string* release_alllog();
  void set_allocated_alllog(std::string* alllog);
  private:
  const std::string& _internal_alllog() const;
  void _internal_set_alllog(const std::string& value);
  std::string* _internal_mutable_alllog();
  public:

  // string dateTime = 2;
  void clear_datetime();
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);
  private:
  const std::string& _internal_datetime() const;
  void _internal_set_datetime(const std::string& value);
  std::string* _internal_mutable_datetime();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string node = 4;
  void clear_node();
  const std::string& node() const;
  void set_node(const std::string& value);
  void set_node(std::string&& value);
  void set_node(const char* value);
  void set_node(const char* value, size_t size);
  std::string* mutable_node();
  std::string* release_node();
  void set_allocated_node(std::string* node);
  private:
  const std::string& _internal_node() const;
  void _internal_set_node(const std::string& value);
  std::string* _internal_mutable_node();
  public:

  // string fun_info = 5;
  void clear_fun_info();
  const std::string& fun_info() const;
  void set_fun_info(const std::string& value);
  void set_fun_info(std::string&& value);
  void set_fun_info(const char* value);
  void set_fun_info(const char* value, size_t size);
  std::string* mutable_fun_info();
  std::string* release_fun_info();
  void set_allocated_fun_info(std::string* fun_info);
  private:
  const std::string& _internal_fun_info() const;
  void _internal_set_fun_info(const std::string& value);
  std::string* _internal_mutable_fun_info();
  public:

  // string message = 6;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:monitor.proto.ParsingLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alllog_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fun_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_parsing_5flog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParsingLog

// string allLog = 1;
inline void ParsingLog::clear_alllog() {
  alllog_.ClearToEmpty();
}
inline const std::string& ParsingLog::alllog() const {
  // @@protoc_insertion_point(field_get:monitor.proto.ParsingLog.allLog)
  return _internal_alllog();
}
inline void ParsingLog::set_alllog(const std::string& value) {
  _internal_set_alllog(value);
  // @@protoc_insertion_point(field_set:monitor.proto.ParsingLog.allLog)
}
inline std::string* ParsingLog::mutable_alllog() {
  // @@protoc_insertion_point(field_mutable:monitor.proto.ParsingLog.allLog)
  return _internal_mutable_alllog();
}
inline const std::string& ParsingLog::_internal_alllog() const {
  return alllog_.Get();
}
inline void ParsingLog::_internal_set_alllog(const std::string& value) {
  
  alllog_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ParsingLog::set_alllog(std::string&& value) {
  
  alllog_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:monitor.proto.ParsingLog.allLog)
}
inline void ParsingLog::set_alllog(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alllog_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:monitor.proto.ParsingLog.allLog)
}
inline void ParsingLog::set_alllog(const char* value,
    size_t size) {
  
  alllog_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:monitor.proto.ParsingLog.allLog)
}
inline std::string* ParsingLog::_internal_mutable_alllog() {
  
  return alllog_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ParsingLog::release_alllog() {
  // @@protoc_insertion_point(field_release:monitor.proto.ParsingLog.allLog)
  return alllog_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParsingLog::set_allocated_alllog(std::string* alllog) {
  if (alllog != nullptr) {
    
  } else {
    
  }
  alllog_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alllog,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:monitor.proto.ParsingLog.allLog)
}

// string dateTime = 2;
inline void ParsingLog::clear_datetime() {
  datetime_.ClearToEmpty();
}
inline const std::string& ParsingLog::datetime() const {
  // @@protoc_insertion_point(field_get:monitor.proto.ParsingLog.dateTime)
  return _internal_datetime();
}
inline void ParsingLog::set_datetime(const std::string& value) {
  _internal_set_datetime(value);
  // @@protoc_insertion_point(field_set:monitor.proto.ParsingLog.dateTime)
}
inline std::string* ParsingLog::mutable_datetime() {
  // @@protoc_insertion_point(field_mutable:monitor.proto.ParsingLog.dateTime)
  return _internal_mutable_datetime();
}
inline const std::string& ParsingLog::_internal_datetime() const {
  return datetime_.Get();
}
inline void ParsingLog::_internal_set_datetime(const std::string& value) {
  
  datetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ParsingLog::set_datetime(std::string&& value) {
  
  datetime_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:monitor.proto.ParsingLog.dateTime)
}
inline void ParsingLog::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:monitor.proto.ParsingLog.dateTime)
}
inline void ParsingLog::set_datetime(const char* value,
    size_t size) {
  
  datetime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:monitor.proto.ParsingLog.dateTime)
}
inline std::string* ParsingLog::_internal_mutable_datetime() {
  
  return datetime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ParsingLog::release_datetime() {
  // @@protoc_insertion_point(field_release:monitor.proto.ParsingLog.dateTime)
  return datetime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParsingLog::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {
    
  } else {
    
  }
  datetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:monitor.proto.ParsingLog.dateTime)
}

// string type = 3;
inline void ParsingLog::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& ParsingLog::type() const {
  // @@protoc_insertion_point(field_get:monitor.proto.ParsingLog.type)
  return _internal_type();
}
inline void ParsingLog::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:monitor.proto.ParsingLog.type)
}
inline std::string* ParsingLog::mutable_type() {
  // @@protoc_insertion_point(field_mutable:monitor.proto.ParsingLog.type)
  return _internal_mutable_type();
}
inline const std::string& ParsingLog::_internal_type() const {
  return type_.Get();
}
inline void ParsingLog::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ParsingLog::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:monitor.proto.ParsingLog.type)
}
inline void ParsingLog::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:monitor.proto.ParsingLog.type)
}
inline void ParsingLog::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:monitor.proto.ParsingLog.type)
}
inline std::string* ParsingLog::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ParsingLog::release_type() {
  // @@protoc_insertion_point(field_release:monitor.proto.ParsingLog.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParsingLog::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:monitor.proto.ParsingLog.type)
}

// string node = 4;
inline void ParsingLog::clear_node() {
  node_.ClearToEmpty();
}
inline const std::string& ParsingLog::node() const {
  // @@protoc_insertion_point(field_get:monitor.proto.ParsingLog.node)
  return _internal_node();
}
inline void ParsingLog::set_node(const std::string& value) {
  _internal_set_node(value);
  // @@protoc_insertion_point(field_set:monitor.proto.ParsingLog.node)
}
inline std::string* ParsingLog::mutable_node() {
  // @@protoc_insertion_point(field_mutable:monitor.proto.ParsingLog.node)
  return _internal_mutable_node();
}
inline const std::string& ParsingLog::_internal_node() const {
  return node_.Get();
}
inline void ParsingLog::_internal_set_node(const std::string& value) {
  
  node_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ParsingLog::set_node(std::string&& value) {
  
  node_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:monitor.proto.ParsingLog.node)
}
inline void ParsingLog::set_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:monitor.proto.ParsingLog.node)
}
inline void ParsingLog::set_node(const char* value,
    size_t size) {
  
  node_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:monitor.proto.ParsingLog.node)
}
inline std::string* ParsingLog::_internal_mutable_node() {
  
  return node_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ParsingLog::release_node() {
  // @@protoc_insertion_point(field_release:monitor.proto.ParsingLog.node)
  return node_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParsingLog::set_allocated_node(std::string* node) {
  if (node != nullptr) {
    
  } else {
    
  }
  node_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:monitor.proto.ParsingLog.node)
}

// string fun_info = 5;
inline void ParsingLog::clear_fun_info() {
  fun_info_.ClearToEmpty();
}
inline const std::string& ParsingLog::fun_info() const {
  // @@protoc_insertion_point(field_get:monitor.proto.ParsingLog.fun_info)
  return _internal_fun_info();
}
inline void ParsingLog::set_fun_info(const std::string& value) {
  _internal_set_fun_info(value);
  // @@protoc_insertion_point(field_set:monitor.proto.ParsingLog.fun_info)
}
inline std::string* ParsingLog::mutable_fun_info() {
  // @@protoc_insertion_point(field_mutable:monitor.proto.ParsingLog.fun_info)
  return _internal_mutable_fun_info();
}
inline const std::string& ParsingLog::_internal_fun_info() const {
  return fun_info_.Get();
}
inline void ParsingLog::_internal_set_fun_info(const std::string& value) {
  
  fun_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ParsingLog::set_fun_info(std::string&& value) {
  
  fun_info_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:monitor.proto.ParsingLog.fun_info)
}
inline void ParsingLog::set_fun_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fun_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:monitor.proto.ParsingLog.fun_info)
}
inline void ParsingLog::set_fun_info(const char* value,
    size_t size) {
  
  fun_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:monitor.proto.ParsingLog.fun_info)
}
inline std::string* ParsingLog::_internal_mutable_fun_info() {
  
  return fun_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ParsingLog::release_fun_info() {
  // @@protoc_insertion_point(field_release:monitor.proto.ParsingLog.fun_info)
  return fun_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParsingLog::set_allocated_fun_info(std::string* fun_info) {
  if (fun_info != nullptr) {
    
  } else {
    
  }
  fun_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fun_info,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:monitor.proto.ParsingLog.fun_info)
}

// string message = 6;
inline void ParsingLog::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ParsingLog::message() const {
  // @@protoc_insertion_point(field_get:monitor.proto.ParsingLog.message)
  return _internal_message();
}
inline void ParsingLog::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:monitor.proto.ParsingLog.message)
}
inline std::string* ParsingLog::mutable_message() {
  // @@protoc_insertion_point(field_mutable:monitor.proto.ParsingLog.message)
  return _internal_mutable_message();
}
inline const std::string& ParsingLog::_internal_message() const {
  return message_.Get();
}
inline void ParsingLog::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ParsingLog::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:monitor.proto.ParsingLog.message)
}
inline void ParsingLog::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:monitor.proto.ParsingLog.message)
}
inline void ParsingLog::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:monitor.proto.ParsingLog.message)
}
inline std::string* ParsingLog::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ParsingLog::release_message() {
  // @@protoc_insertion_point(field_release:monitor.proto.ParsingLog.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ParsingLog::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:monitor.proto.ParsingLog.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace monitor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_parsing_5flog_2eproto
